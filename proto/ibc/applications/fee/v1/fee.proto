syntax = "proto3";

package ibc.applications.fee.v1;

option go_package = "github.com/cosmos/ibc-go/v3/modules/apps/29-fee/types";

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "ibc/core/channel/v1/channel.proto";


// Fee implements the ics29 Fee interface
// See Fee Payment Middleware spec:
// https://github.com/cosmos/ibc/tree/master/spec/app/ics-029-fee-payment#fee-middleware-contract
message Fee {
  repeated cosmos.base.v1beta1.Coin recv_fee = 1 [
    (gogoproto.moretags)     = "yaml:\"receive_fee\"",
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin ack_fee = 2 [
    (gogoproto.moretags)     = "yaml:\"ack_fee\"",
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated cosmos.base.v1beta1.Coin timeout_fee = 3 [
    (gogoproto.moretags)     = "yaml:\"timeout_fee\"",
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// IdentifiedPacketFee contains the relayer fee along with the associated metadata needed to process it.
// This includes the PacketId identifying the packet the fee is paying for,
// the refund address to which any unused funds are refunded,
// and an optional list of relayers that are permitted to receive the fee.
message IdentifiedPacketFee {
  ibc.core.channel.v1.PacketId packet_id      = 1 [(gogoproto.moretags) = "yaml:\"packet_id\""];
  Fee                          fee            = 2 [(gogoproto.nullable) = false];
  string                       refund_address = 3 [(gogoproto.moretags) = "yaml:\"refund_address\""];
  repeated string              relayers       = 4;
}
